[[ python web ]]

1. 웹 서비스 모듈
 > flask : 플라스크
  → 마이크로 에디션 → 필요한만큼 알아서 만든다 → nodejs → ex) jupyter
 > DJango : 장고
  → 풀스펙 에디션 → spring

2. python으로 웹을 구성하면 얻는 이득
 > 동일언어로 모든 시스템 구축
 > 호환은 기본, 이기종이라는 표현이 필요 없다

3. 단점
 > 리눅스에 서비스 구축시 조금 까다롭다
 > 페브릭이라는 모듈을 이용하여 자동화시킨다
   코드를 작성해서, 로컬PC에서 구동만 시키면 자동으로 서버 세팅 및 소스 업데이트까지 모두 완료
   + git를 같이 사용
 > flask는 nodejs와는 달리 단독으로 구동하면 안 된다(성능 때문에)
   apache or nginx 서버와 연동해서 사용

4. 설치
 $ pip install flask

5. flask 구조
 service
  └ public     : 정적 데이터, js, css, 이미지, 기타 등등
                 폴더명은 blueprint를 적용하면 변경 가능
  └ templates  : html 위치
  └ run.py 

6. 구현 사항 → 요구사항 정의
 - 머신러닝으로 학습한 예측모델은 관리자의 조작에 의해(백오피스) 업그레이드, 다운그레이드가 처리되어야 한다
   고려 사항 : 시스템을 다운시킨 후 업그레이드/다운그레이드인가? → 배치학습방식(오프라인학습) 
              => 배치학습방식 + 자동 업그레이드(마이너한 상황) 적용이 지향점
              시스템 중단 없이 자동으로 처리할 것인가? → 세미배치학습방식(온라인학습방식)
 
 - 번역을 요청하는 유저의 데이터 수집
   → 향후 서비스 관점이라면 약관 고려              
     해당 데이터는 향후 학습용 데이터로 재사용 → 이 데이터를 유지할 것인가? 버릴 것인가?
 
 - 실제 번역을 제공하기 위해서 (요식행위이지만) 파파고 번역 연동
   → 번역을 위해 어떤 자료들을 받는지 동선 확인 및 데이터 확인
  
 - 만약, 회원 정보를 활용하여(회원가입 및 전용 페이지를 제공한다면) API로 제공하고 쿼터를 사용할 수 있다
   → 머신러닝/딥러닝 기반 서비스 제공 → 제공의 대가로 유저의 데이터를 확보, 유저는 서비스를 제공받는 것

7. 관련 기술
 - 파이썬에서 DB를 엑세스하는 라이브러리 필요
 - flask 관련 심화 지식

8. 데이터베이스 연동
 - (base) $ conda install pymysql or $ pip install pymysql